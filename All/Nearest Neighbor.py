
__author__ = "Siddharth Gabu"
__license__ = "MIT"
__version__ = "1.0"
__credits__ = "Josh Gordon - Google Developers"
__maintainer__ = "Siddharth Gabu"
__status__ = "Practice"

'''
Here is requirements

# Automatically generated by https://github.com/damnever/pigar.

numpy == 1.18.4
pydotplus == 2.0.2
scipy == 1.4.1
six == 1.14.0
sklearn == 0.0

Used previously build pipeline
needs to download "graphviz tool" and set path in environment variables  

'''

import random
from scipy.spatial import distance

def euc(a,b):
    return distance.euclidean(a,b)

################# our k-nearest neighbor #############
class ScrappyKNN():
    def fit(self, X_train, y_train):
        self.X_train = X_train
        self.y_train = y_train
    
    def predict(self, X_test):
        prediction = [] # store prediction
        for row in X_test:
            label = self.closest(row) # it's returen closest 
            prediction.append(label)
        return prediction
    
    def closest(self , row):
        best_dist = euc(row, self.X_train[0])
        best_index = 0
        for i in range(1, len(self.X_train)):
            dist = euc(row , self.X_train[i])
            if dist < best_dist :
                best_dist = dist
                best_index = i
        return self.y_train[best_index]
    

import numpy as np
from sklearn.datasets import load_iris

iris = load_iris()

X = iris.data
y = iris.target

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.5) # 0.5 for half train and half test

'''
for i in range(len(X_train)):
    print("Example %d: label %s, features %s" % (i, X_train[i], y_train[i]))
for i in range(len(X_test)):
    print("Example %d: label %s, features %s" % (i, X_test[i], y_test[i]))
'''

'''we can just change these two lines '''
#from sklearn import tree
#clf = tree.DecisionTreeClassifier()
#from sklearn.neighbors import KNeighborsClassifier
#clf = KNeighborsClassifier()
clf = ScrappyKNN()

clf.fit(X_train,y_train)
prediction = clf.predict(X_test)
#print(prediction)

from sklearn.metrics import accuracy_score
print(f"k-nearest neighbor: {accuracy_score(y_test,prediction)} ")

################# DecisionTreeClassifier #############
from sklearn import tree
test_idx = [0,50,100]

# training data
train_target = np.delete(iris.target,test_idx)
train_data = np.delete(iris.data,test_idx,axis=0)

# testing data
test_target = iris.target[test_idx]
test_data = iris.data[test_idx]

clf = tree.DecisionTreeClassifier()
clf = clf.fit(train_data,train_target)
print(f"DecisionTreeClassifier: {accuracy_score(y_test,prediction)} ")

#viz code
from six import StringIO
import pydotplus
dot_data = StringIO()
tree.export_graphviz(clf,out_file=dot_data,
                        feature_names=iris.feature_names,
                        class_names=iris.target_names,
                        filled=True,rounded=True,
                        impurity=False)

graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_pdf("iris_KNN.pdf")