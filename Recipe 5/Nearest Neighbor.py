'''
Here is requirements

# Automatically generated by https://github.com/damnever/pigar.

numpy == 1.18.4
scipy == 1.4.1
sklearn == 0.0

Used previously build pipeline 

'''

import random
from scipy.spatial import distance

def euc(a,b):
    return distance.euclidean(a,b)

class ScrappyKNN():
    def fit(self, X_train, y_train):
        self.X_train = X_train
        self.y_train = y_train
    
    def predict(self, X_test):
        prediction = []
        for row in X_test:
            label = self.closest(row)
            prediction.append(label)
        return prediction
    
    def closest(self , row):
        best_dist = euc(row, self.X_train[0])
        best_index = 0
        for i in range(1, len(self.X_train)):
            dist = euc(row , self.X_train[i])
            if dist < best_dist :
                best_dist = dist
                best_index = i
        return self.y_train[best_index]
    

import numpy as np
from sklearn.datasets import load_iris

iris = load_iris()

X = iris.data
y = iris.target

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.5) # 0.5 for half train and half test

'''we can just change these two lines '''
#from sklearn import tree
#clf = tree.DecisionTreeClassifier()
#from sklearn.neighbors import KNeighborsClassifier
#clf = KNeighborsClassifier()
clf = ScrappyKNN()

clf.fit(X_train,y_train)
prediction = clf.predict(X_test)
#print(prediction)

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,prediction))